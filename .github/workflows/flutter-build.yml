name: Build Android APKs

on:
  workflow_call:
    inputs:
      upload-artifact:
        type: boolean
        default: true
      upload-tag:
        type: string
        default: "nightly"

env:
  SCITER_RUST_VERSION: "1.75"
  RUST_VERSION: "1.75"
  CARGO_NDK_VERSION: "3.1.2"
  VCPKG_COMMIT_ID: "6f29f12e82a8293156836ad81cc9bf5af41fe836"
  FLUTTER_VERSION: "3.24.5"
  ANDROID_FLUTTER_VERSION: "3.24.5"
  TAG_NAME: "${{ inputs.upload-tag }}"
  NDK_VERSION: "r27c"
  ANDROID_SIGNING_KEY: "${{ secrets.ANDROID_SIGNING_KEY }}"
  UPLOAD_ARTIFACT: "${{ inputs.upload-artifact }}"

jobs:
  generate-bridge:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-22.04, extra-build-args: "" }
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install prerequisites
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            clang cmake curl gcc git g++ libclang-11-dev libgtk-3-dev \
            llvm-11-dev nasm ninja-build pkg-config wget

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.job.target }}
          components: rustfmt

      - name: Cache Bridge build
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: bridge-${{ matrix.job.os }}

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install flutter-rust-bridge deps
        run: |
          cargo install cargo-expand --version ${{ env.CARGO_EXPAND_VERSION }} --locked
          cargo install flutter_rust_bridge_codegen --version ${{ env.FLUTTER_RUST_BRIDGE_VERSION }} --features "uuid" --locked
          pushd flutter
          sed -i -e 's/extended_text: 14.0.0/extended_text: 13.0.0/g' pubspec.yaml
          flutter pub get
          popd

      - name: Generate bridge
        run: |
          flutter_rust_bridge_codegen \
            --rust-input ./src/flutter_ffi.rs \
            --dart-output ./flutter/lib/generated_bridge.dart \
            --c-output ./flutter/macos/Runner/bridge_generated.h
          cp ./flutter/macos/Runner/bridge_generated.h ./flutter/ios/Runner/bridge_generated.h

      - name: Upload bridge-artifact
        uses: actions/upload-artifact@master
        with:
          name: bridge-artifact
          path: |
            ./src/bridge_generated.rs
            ./src/bridge_generated.io.rs
            ./flutter/lib/generated_bridge.dart
            ./flutter/lib/generated_bridge.freezed.dart
            ./flutter/macos/Runner/bridge_generated.h
            ./flutter/ios/Runner/bridge_generated.h

  build-rustdesk-android:
    needs: [generate-bridge]
    name: build rustdesk android apk ${{ matrix.job.arch }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { arch: aarch64, target: aarch64-linux-android, os: ubuntu-22.04, reltype: release, suffix: "" }
          - { arch: armv7,  target: armv7-linux-androideabi, os: ubuntu-22.04, reltype: release, suffix: "" }
          - { arch: x86_64, target: x86_64-linux-android, os: ubuntu-22.04, reltype: release, suffix: "" }
    steps:
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: false

      - name: Export cache env vars
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL||'');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN||'');

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake curl gcc-multilib git g++ libgtk-3-dev \
            libpulse-dev llvm-11-dev nasm ninja-build openjdk-17-jdk-headless pkg-config tree wget

      - name: Checkout source
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.ANDROID_FLUTTER_VERSION }}

      - name: Patch Flutter
        run: |
          cd $(dirname $(dirname $(which flutter)))
          [[ "3.24.5" == ${{ env.ANDROID_FLUTTER_VERSION }} ]] && git apply ${{ github.workspace }}/.github/patches/flutter_3.24.4_dropdown_menu_enableFilter.diff

      - name: Setup NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: ${{ env.NDK_VERSION }}
          add-to-path: true

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
          doNotCache: false

      - name: Install Android deps via vcpkg
        run: |
          case ${{ matrix.job.target }} in
            aarch64-linux-android) ANDROID_TARGET=arm64-v8a ;;
            armv7-linux-androideabi) ANDROID_TARGET=armeabi-v7a ;;
            x86_64-linux-android) ANDROID_TARGET=x86_64 ;;
          esac
          ./flutter/build_android_deps.sh "${ANDROID_TARGET}"
        shell: bash

      - name: Restore bridge files
        uses: actions/download-artifact@master
        with:
          name: bridge-artifact
          path: ./

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt

      - name: Cache Rust build
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: rustdesk-lib-cache-android
          key: ${{ matrix.job.target }}

      - name: Build rustdesk lib
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          rustup target add ${{ matrix.job.target }}
          cargo install cargo-ndk --version ${{ env.CARGO_NDK_VERSION }} --locked
          ./flutter/ndk_${{ matrix.job.arch }}.sh
          mkdir -p flutter/android/app/src/main/jniLibs/${{ matrix.job.arch == 'aarch64' && 'arm64-v8a' || matrix.job.arch == 'armv7' && 'armeabi-v7a' || 'x86_64' }}
          cp target/${{ matrix.job.target }}/release/liblibrustdesk.so flutter/android/app/src/main/jniLibs/${{ matrix.job.arch == 'aarch64' && 'arm64-v8a' || matrix.job.arch == 'armv7' && 'armeabi-v7a' || 'x86_64' }}/librustdesk.so
        shell: bash

      - name: Build APK
        env:
          JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
        run: |
          export PATH=$JAVA_HOME/bin:$PATH
          sed -i "s/signingConfigs.release/signingConfigs.debug/g" flutter/android/app/build.gradle
          pushd flutter
          flutter build apk --${{ matrix.job.reltype }} --target-platform android-${{ matrix.job.arch == 'x86_64' && 'x64' || matrix.job.arch == 'aarch64' && 'arm64' || 'arm' }} --split-per-abi
          mv build/app/outputs/flutter-apk/app-*-${{ matrix.job.reltype }}.apk ../rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.apk
          popd
        shell: bash

      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        if: env.ANDROID_SIGNING_KEY != null
        with:
          releaseDirectory: .
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Upload APK
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@master
        with:
          name: rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.apk
          path: |
            ${{ steps.sign-android-release.outputs.signedReleaseFile }}
            rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.apk

  build-rustdesk-android-universal:
    needs: [build-rustdesk-android]
    if: ${{ inputs.upload-artifact }}
    runs-on: ubuntu-22.04
    env:
      reltype: release
      suffix: ""
    steps:
      - name: Restore bridge files
        uses: actions/download-artifact@master
        with:
          name: bridge-artifact
          path: ./

      - name: Download per-arch libs
        uses: actions/download-artifact@master
        with:
          name: librustdesk.so.${{ matrix.job.target }}
          path: flutter/android/app/src/main/jniLibs/${{ matrix.job.arch == 'aarch64' && 'arm64-v8a' || matrix.job.arch == 'armv7' && 'armeabi-v7a' || 'x86_64' }}

      - name: Build universal APK
        env:
          JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
        run: |
          export PATH=$JAVA_HOME/bin:$PATH
          sed -i "s/signingConfigs.release/signingConfigs.debug/g" flutter/android/app/build.gradle
          pushd flutter
          flutter build apk --${{ env.reltype }} --target-platform android-arm64,android-arm,android-x64
          mv build/app/outputs/flutter-apk/app-${{ env.reltype }}.apk ../rustdesk-${{ env.VERSION }}-universal.apk
          popd

      - name: Sign universal APK
        uses: r0adkll/sign-android-release@v1
        if: env.ANDROID_SIGNING_KEY != null
        with:
          releaseDirectory: .
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Upload universal APK
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@master
        with:
          name: rustdesk-${{ env.VERSION }}-universal.apk
          path: |
            ${{ steps.sign-android-release.outputs.signedReleaseFile }}
            rustdesk-${{ env.VERSION }}-universal.apk
